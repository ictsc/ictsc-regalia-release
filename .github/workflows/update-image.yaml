name: Update Image
on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to apply secrets'
        required: true
        default: 'dev'
        type: string
      newTag:
        description: 'New image tag'
        required: true
        type: string

jobs:
  update-image:
    name: "[${{ inputs.environment }}] Update images to :${{ inputs.newTag }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aquaproj/aqua-installer@v3.1.1
        with:
          aqua_version: v2.39.1
      - name: Update image
        run: |
          # https://github.com/orgs/community/discussions/26560
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          cd ${{ inputs.environment }}
          kustomize edit set image \
            backend=ghcr.io/ictsc/ictsc-regalia/scoreserver:${{ inputs.newTag }} \
            frontend=ghcr.io/ictsc/ictsc-regalia/frontend:${{ inputs.newTag }}

          git commit -am "[${{ inputs.environment }}] Update images to :${{ inputs.newTag }}"
          git push --force origin $(git branch --show-current):update-image-${{ inputs.environment }}

      - uses: actions/github-script@v7
        env:
          inputs: ${{ toJSON(inputs) }}
        with:
          script: |
            const inputs = JSON.parse(process.env.inputs);
            const {
              repo: {owner, repo},
              runId,
              serverUrl
            } = context;

            const head = `update-image-${ inputs.environment }`;
            const base = context.ref.split('/').pop();
            const title = `[${ inputs.environment }] Update images :${ inputs.newTag }`;
            const body = `Update images to :${ inputs.newTag } in ${ inputs.environment } environment

            GitHub Actions Job: ${ serverUrl }/${ owner }/${ repo }/actions/runs/${ runId }`

            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${head}`,
              base: base,
            });

            if (pullRequests.length === 0) {
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head,
                base,
                title,
                body,
              });
            } else {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pullRequests[0].number,
                title,
                body,
              });
            }
